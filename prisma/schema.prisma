datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  username  String      @unique
  /// @HideField({ output: true })
  password  String
  firstName String
  lastName  String
  birthDate DateTime?
  /// @HideField({ input:true, output: true })
  records   UserRecord?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model UserRecord {
  id               String                 @id @default(uuid())
  user             User                   @relation(fields: [userId], references: [id])
  userId           Int                    @unique
  financialRecords FinancialRecord[]
  emotionalRecords EmotionalStateRecord[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @default(now()) @updatedAt
}

enum FinancialOperation {
  LOAN
  DEBT
}

model FinancialRecord {
  id            String             @id @default(uuid())
  type          FinancialOperation
  title         String
  description   String?
  amount        Float
  date          DateTime?
  userRecords   UserRecord?        @relation(fields: [userRecordsId], references: [id])
  userRecordsId String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
}

enum EmotionalState {
  SAD
  NORMAL
  HAPPY
}

model EmotionalStateRecord {
  id            String         @id @default(uuid())
  state         EmotionalState
  description   String?
  date          DateTime
  userRecords   UserRecord?    @relation(fields: [userRecordsId], references: [id])
  userRecordsId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}
